[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 pairplot authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/TODO.html","id":null,"dir":"","previous_headings":"","what":"TODO + ideas","title":"TODO + ideas","text":"Correlations heatmap corner choice + possibility adding legend –> ensure legend one side graph. Fix scale text data naturally 0 1.","code":""},{"path":"/articles/diagonal.html","id":"histogram","dir":"Articles","previous_headings":"","what":"Histogram","title":"Diagonal","text":"pairplot assumes function passed three parts; diagonal, lower corner, upper corner eventual transformations affect window differently, .e transformations create discrepancies maximum minimum value transformed data across zones. However, cases may want apply transformation corners diagonal. example, rank transformation. Plotting histogram ranked transform data insightful, however plotting ranked transform data corner plot can give idea monotonic degree two variable rank, thus gives insight whether two measures produce similar ranking (visual analog Spearman correlation). Plotting histogram non-ranked transform data also useful idea distribution data. One strategy, feed geom object one corner custom stat computes rank y-axis x-axis. map diagonal histogram operates directly original data. 300 data points, ranked data lie boundaries corresponding plot grid boundaries data set 0 300. pairplot corners priority diagonal setting scale limits. Therefore, diagonal histogram operates 300 untransformed point values, values lying 0 1, displayed histogram nearly visible. result diagonal mapped function consider surrounding scaled upper lower bounds near subplots. Rather trying implement automatic upper lower bound detector function within internal function mapplot. made choice let user control. Diagonal functions can access surrounding subplot data. adding diag_neighbour=c(\"t\", \"b\", \"l\", \"r\") pairgrid. selected neighbour data passed map_diag call form list: list(t=<ggplot_built>, b=<ggplot_built, ...) Returning example, can leverage argument function pass map_diag set histogram min-max scaling based neighbour limits. already implemented pair_grid_geom: Now, let’s see happens use feature. compute scatter geom smooth rank transformed variable. use internal functions geom_point_rank() & geom_smooth_rank() compute lower corner plots. :  pairgrid see histogram proportion.  , leverage surrounding information min max scale data x-axis y-axis respect surroundings.  -side double min max scaling interpretation can misleading. note might useful:  Another option visualizing kind data without min max scaling allow misalignment limits diagonal display text diagonal border contigous subplots. Four arguments specified, common_xlim=<func>, common_ylim=<func>, diag_share_lim=FALSE, text_on_diag=TRUE.","code":"library(pairplot) pair_geom_histogram #> function (data, mapping, neighbour_ggdata = NULL, unit_y = FALSE,  #>     stat = \"bin\", bins = 10, binwidth = function(x) { #>         bin_width_auto(x, na.rm = TRUE) #>     }, ...)  #> { #>     bin_width_value <- binwidth(data[[1]]) #>     x = rlang::as_name(mapping$x) #>     if (unit_y) { #>         p <- ggplot(data = data, mapping = mapping) + geom_histogram(aes(y = ..ncount..),  #>             stat = stat, bins = bins, binwidth = binwidth, ...) #>     } #>     else { #>         if (length(neighbour_ggdata)) { #>             for (key in c(\"t\", \"b\")) { #>                 xdata = neighbour_ggdata[[key]] #>                 if (length(xdata)) { #>                   break #>                 } #>             } #>             for (key in c(\"l\", \"r\")) { #>                 ydata = neighbour_ggdata[[key]] #>                 if (length(ydata)) { #>                   break #>                 } #>             } #>             xaxis_bounds <- if (length(xdata))  #>                 range(xdata$data[[1]]$x) #>             else { #>                 c(min(data[x]), max(data[x])) #>             } #>             yaxis_bounds <- if (length(ydata))  #>                 range(ydata$data[[1]]$y) #>             else { #>                 c(min(data[x]), max(data[x])) #>             } #>             lower_bound_y <- yaxis_bounds[1] #>             upper_bound_y <- yaxis_bounds[2] #>             lower_bound_x <- xaxis_bounds[1] #>             upper_bound_x <- xaxis_bounds[2] #>             t_data = min_max_scale(data[x], lower_bound_x, upper_bound_x) #>             p <- ggplot(data = t_data, mapping = mapping) #>         } #>         else { #>             p <- ggplot(data = data, mapping = mapping) #>             upper_bound_y <- max(data[x]) #>             lower_bound_y <- min(data[x]) #>         } #>         p <- p + geom_histogram(aes(y = after_stat((upper_bound_y -  #>             lower_bound_y) * ((count - min(count))/(max(count) -  #>             min(count))) + lower_bound_y)), stat = stat, bins = bins,  #>             binwidth = binwidth, ...) #>     } #>     return(p) #> } #> <bytecode: 0x55deeeed6b38> #> <environment: namespace:pairplot> library(ggplot2) penguins_url <- \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv\" columns <- c(\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\") penguins <- read.csv(penguins_url)[columns] penguins <- penguins[!apply(is.na(penguins), 1, any), ] # dropping NA  pair_geom_rank_smooth <- function(data, mapping, formula=y~x, method=\"loess\", ...) {   p <- ggplot(data = data, mapping = mapping) +        geom_point_rank() +        geom_smooth_rank(formula = formula, method=method, ...)   return(p) }  pair_geom_rank_smooth(penguins, aes(x=flipper_length_mm, y=body_mass_g)) pairgrid(          penguins,          map_lower=pair_geom_rank_smooth,          map_diag=pair_geom_histogram,          map_upper=NULL,          diag_share_lim=T, repeat_text=T,          common_ylim=function(data, y){return(c(min(rank(data[y])), max(rank(data[y]))))},          common_xlim=function(data, x){return(c(min(rank(data[x])), max(rank(data[x]))))} ) #> Warning: Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y pairgrid(          penguins,          map_lower=pair_geom_rank_smooth,          map_diag=pair_geom_histogram,          map_upper=pair_geom_rank_smooth,          diag_share_lim=T, repeat_text=T,          common_xlim=function(data, x){            return(c(min(rank(data[x])), max(rank(data[x]))))          },          common_ylim=function(data, y){            return(c(min(rank(data[y])), max(rank(data[y]))))          },          diag_neighbour=c(\"l\", \"b\", \"t\", \"r\") ) #> Warning: Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y pairgrid(          penguins,          map_lower=pair_geom_rank_smooth,          map_diag=pair_geom_histogram,          map_upper=pair_geom_rank_smooth,          common_xlim=function(data, x){            return(c(min(rank(data[x])), max(rank(data[x]))))          },          common_ylim=function(data, y){            return(c(min(rank(data[y])), max(rank(data[y]))))          },          diag_neighbour=c(\"l\", \"b\", \"t\", \"r\") ) + patchwork::plot_annotation(caption=element_text(\"Histograms' x and y axis were rescaled with respect to the surrounding plots' y and x limits\")) #> Warning: Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y pairgrid(          penguins,          map_lower=pair_geom_rank_smooth,          map_diag=pair_geom_histogram,          map_upper=pair_geom_rank_smooth,          common_xlim=function(data, x){            return(c(min(rank(data[x])), max(rank(data[x]))))          },          common_ylim=function(data, y){            return(c(min(rank(data[y])), max(rank(data[y]))))          }, diag_share_lim=FALSE,           text_on_diag=TRUE ) #> Warning: Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y pairgrid(           penguins,          map_lower=pair_geom_rank_smooth,          map_diag=pair_geom_histogram,          map_upper=NULL,          diag_share_lim=F, repeat_text=T,          common_xlim=function(data, x){            return(c(min(rank(data[x])), max(rank(data[x]))))          },          common_ylim=function(data, y){            return(c(min(rank(data[y])), max(rank(data[y]))))          },         diag_neighbour=c(\"l\", \"b\", \"t\", \"r\") ) #> Warning: Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y"},{"path":"/articles/pairplot.html","id":"default-settings","dir":"Articles","previous_headings":"","what":"Default settings","title":"pairplot","text":"","code":"library(pairplot) penguins_url <- \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv\" columns <- c(\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\") penguins <- read.csv(penguins_url)[columns] penguins <- penguins[!apply(is.na(penguins), 1, any), ] # dropping NA  pairgrid(          penguins,          map_lower=pair_geom_smooth,          map_diag=pair_geom_histogram,          map_upper=pair_geom_point ) #> Warning: Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y"},{"path":"/articles/pairplot.html","id":"legend-text-on-all-plots","dir":"Articles","previous_headings":"","what":"Legend text on all plots","title":"pairplot","text":"","code":"pairgrid(          penguins,          map_lower=pair_geom_smooth,          map_diag=pair_geom_histogram,          map_upper=pair_geom_point,          repeat_text=TRUE ) #> Warning: Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y"},{"path":"/articles/pairplot.html","id":"playing-with-theme","dir":"Articles","previous_headings":"","what":"Playing with theme","title":"pairplot","text":"","code":"library(patchwork) library(ggplot2) pairgrid(          penguins,          map_lower=pair_geom_smooth,          map_diag=pair_geom_histogram,          map_upper=pair_geom_point,          repeat_text=TRUE ) + plot_layout() & theme(plot.margin = margin(                             r = 0,                             l = 0.5                             )                           ) #> Warning: Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexandre Sonderegger. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sonderegger (2022). pairplot: library pairplots.. R package version 0.1.2.","code":"@Manual{,   title = {pairplot: A library for pairplots.},   author = {Alexandre Sonderegger},   year = {2022},   note = {R package version 0.1.2}, }"},{"path":"/index.html","id":"pairplot","dir":"","previous_headings":"","what":"A library for pairplots.","title":"A library for pairplots.","text":"Library making pairplots R, inspired seaborn.pairplot GGally::ggpairs(). based ggplot2 patchwork. package small designed general. grid region made three regions: 1) Lower triangle 2) Diagonal 3) Upper diagonal region can mapped plot function NULL. NULL, element_blank() assigned. way can build triangle plots.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A library for pairplots.","text":"recommend installing specific commit master branch projects. API likely change rapidly.","code":"devtools::install_github(\"sondalex/r-pairplot\")"},{"path":[]},{"path":"/index.html","id":"remarks","dir":"","previous_headings":"","what":"Remarks","title":"A library for pairplots.","text":"Currently, pairplot unit-test implemented. likely exist underlying bugs. catch one, opening issue /proposing pull request really helpful.","code":""},{"path":"/reference/column_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute pairs of colnames based on the following architecture:\nSuppose a dataframe with column ordered as follow : c(","title":"Compute pairs of colnames based on the following architecture:\nSuppose a dataframe with column ordered as follow : c(","text":"Compute pairs colnames based following architecture: Suppose dataframe column ordered follow : c(\"\", \"B\", \"C\", \"D\") pairs computed follow AA AB AC BA BB BC CA CB CC","code":""},{"path":"/reference/column_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute pairs of colnames based on the following architecture:\nSuppose a dataframe with column ordered as follow : c(","text":"","code":"column_pairs(data)"},{"path":"/reference/column_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute pairs of colnames based on the following architecture:\nSuppose a dataframe with column ordered as follow : c(","text":"data Dataframe","code":""},{"path":"/reference/column_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute pairs of colnames based on the following architecture:\nSuppose a dataframe with column ordered as follow : c(","text":"list containing pair. look like [1] 1 \"\" \"\" [2] 1 \"\" \"B\" [3] 1 \"\" \"C\" [4] 1 \"B\" \"\" [5] 1 \"B\" \"B\" [6] 1 \"B\" \"C\" [7] 1 \"C\" \"\" [8] 1 \"C\" \"B\" [9] 1 \"C\" \"C\"","code":""},{"path":"/reference/configure_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Set theme programatically conditional on arguments. — configure_theme","title":"Set theme programatically conditional on arguments. — configure_theme","text":"Set theme programatically conditional arguments.","code":""},{"path":"/reference/configure_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set theme programatically conditional on arguments. — configure_theme","text":"","code":"configure_theme(   repeat_labels,   repeat_text,   text_on_diag,   contigous_l,   contigous_b,   on_diag )"},{"path":"/reference/configure_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set theme programatically conditional on arguments. — configure_theme","text":"repeat_text See pairgrid() text_on_diag See pairgrid() contigous_l boolean indicating whether subplot contigous left side. contigous_b boolean indicating whether subplot contigous bottom. on_diag boolean indicating whether subplot diagonal. repeat_label See pairgrid()","code":""},{"path":"/reference/global_ylim.html","id":null,"dir":"Reference","previous_headings":"","what":"Description analog to global_xlim() but for y axis. — global_ylim","title":"Description analog to global_xlim() but for y axis. — global_ylim","text":"Description analog global_xlim() y axis.","code":""},{"path":"/reference/global_ylim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Description analog to global_xlim() but for y axis. — global_ylim","text":"","code":"global_ylim(data, y)"},{"path":"/reference/mapplot.html","id":null,"dir":"Reference","previous_headings":"","what":"In order to to construct a full pair matrix. This function has to be called\nfor each part (lower corner, upper corner, diagonal). The call on diagonal should be last\nin order to have access to neighbour subplots metadata. — mapplot","title":"In order to to construct a full pair matrix. This function has to be called\nfor each part (lower corner, upper corner, diagonal). The call on diagonal should be last\nin order to have access to neighbour subplots metadata. — mapplot","text":"order construct full pair matrix. function called part (lower corner, upper corner, diagonal). call diagonal last order access neighbour subplots metadata.","code":""},{"path":"/reference/mapplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"In order to to construct a full pair matrix. This function has to be called\nfor each part (lower corner, upper corner, diagonal). The call on diagonal should be last\nin order to have access to neighbour subplots metadata. — mapplot","text":"","code":"mapplot(   data,   mapping,   pairs,   grobs,   indices,   func,   no_upper,   no_lower,   xlim_func = NULL,   ylim_func = NULL,   diag_share_lim = TRUE,   common_scale = NULL,   check.overlap = TRUE,   neighbours = NULL,   scale_diag_plot = TRUE,   ... )"},{"path":"/reference/mapplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"In order to to construct a full pair matrix. This function has to be called\nfor each part (lower corner, upper corner, diagonal). The call on diagonal should be last\nin order to have access to neighbour subplots metadata. — mapplot","text":"xlim_func See pairgrid() parameter common_xlim (equivalent). ylim_func function set y axis limits. set conjunction diag_share_lim set TRUE, plots ylimit, ylim set common. diag_share_lim set TRUE. Y X axis limits also use ylim_func. pair_geom_histogram example. check.overlap Seeggplot2::guide_axis() neighbours map (named list) NULL. Map form: subplot_index=list(t=<int|NULL>, b=<int|NULL>, l=<int|NULL>, r=<int|NULL>) NULL, function call func() include data argument neighbour_ggdata neighbour(s): func(neighbour_ggdata=list(t=ggplot_build(grobs_index[[t_index]])), etc.). checks whether selected grobs exist. Checks reserved function calling mapplot. scale_diag_plot See pairgrid()","code":""},{"path":"/reference/pair_geom_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Min max histogram — pair_geom_histogram","title":"Min max histogram — pair_geom_histogram","text":"Min max histogram","code":""},{"path":"/reference/pair_geom_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Min max histogram — pair_geom_histogram","text":"","code":"pair_geom_histogram(   data,   mapping,   neighbour_ggdata = NULL,   unit_y = FALSE,   stat = \"bin\",   bins = 10,   binwidth = function(x) {      bin_width_auto(x, na.rm = TRUE)  },   ... )"},{"path":"/reference/pair_geom_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Min max histogram — pair_geom_histogram","text":"unit_y Whether scale y (min-max) interval 0, 1. min_max function transforming data. values used boundaries. x y provided. Scaling done one dimension . min max scaling.","code":""},{"path":"/reference/pairgrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a pairplot. — pairgrid","title":"Plot a pairplot. — pairgrid","text":"Plot pairplot.","code":""},{"path":"/reference/pairgrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a pairplot. — pairgrid","text":"","code":"pairgrid(   data,   mapping = NULL,   map_lower,   map_diag,   map_upper,   common_xlim = global_xlim,   common_ylim = global_ylim,   diag_share_lim = TRUE,   common_scale = scales::label_number(accuracy = 1),   repeat_labels = FALSE,   repeat_text = FALSE,   check.overlap = TRUE,   diag_neighbour = NULL,   text_on_diag = T,   diag_share_ylim = NULL,   scale_diag_plot = FALSE,   ... )"},{"path":"/reference/pairgrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a pairplot. — pairgrid","text":"data data frame. map_lower function returning ggplot2 object map_diag Idem map_upper Idem common_xlim Accepts function returns pair limit. default uses global_xlim() diag_share_lim See mapplot() explanations. common_scale function applying common scale across subplots. repeat_text Boolean indicating whether text (digits) set subplots. FALSE, left bottom contigous plots text set. diag_neighbour character vector c(\"t\", \"b\", \"l\", \"r\"). specified, data selected neighbour data passed map_diag, functions. specified subplots top-left bottom-right corner always return neighbours data. text_on_diag Whether apply text diagonal. argument applies one corners plots. diag_share_ylim Deprecated Users use diag_share_lim instead scale_diag_plot Whether unit scale diag pairplot. function passed map_diag consider argument unit_y setting option TRUE might lead scale limits issues. ... Arguments passed mapplot() size integer representing size square. only_x Boolean indicating whether method passed map_diag aesteatics y axis, histogram","code":""},{"path":"/reference/pairgrid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a pairplot. — pairgrid","text":"Details","code":"library(ggplot2) library(pairplot) penguins_url <- \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv\" columns <- c(\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\") penguins <- read.csv(penguins_url)[columns] penguins <- penguins[!apply(is.na(penguins), 1, any), ] # dropping NA pairgrid(           penguins,           map_lower=pair_geom_smooth,           map_diag=pair_geom_histogram,           map_upper=pair_geom_point ) #> Warning: Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y #> Ignoring unknown parameters: unit_y"},{"path":[]},{"path":"/news/index.html","id":"changes-0-1-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"pairplot 0.1.2","text":"Changed pairplot::pair_geom_histogram scaling based neighbour internals. bounds min max scaling data set neighbour panel_scales_x panel_scales_y attributes. case lead negative lower bounds, particular panel_scales_y. y-axis scales often negative offset. cases lower bound scales negative. Now, bounds set transformed data neighbour plots. might still unstable. look internals ggplot2 library.","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"pairplot 0.1.1","text":"diag_share_ylim deprecated favor diag_share_lim. Remove pairgrid unused arguments. Add possible knowledge surrounding subplots diagonal subplots. Works also corner plot.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"pairplot 0.1.1","text":"Important: Fixed min-max scaling error pair_geom_histogram.","code":""},{"path":"/news/index.html","id":"pairplot-010","dir":"Changelog","previous_headings":"","what":"pairplot 0.1.0","title":"pairplot 0.1.0","text":"layout system relies patchwork Now accessible GitHub.","code":""}]
